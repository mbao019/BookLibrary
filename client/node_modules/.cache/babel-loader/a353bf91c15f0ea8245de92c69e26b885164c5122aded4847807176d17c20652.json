{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\VS-Work\\\\bookLibrary\\\\client\\\\src\\\\components\\\\edit.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\nimport '../App.css';\nimport { Calendar } from 'primereact/calendar';\nimport { Button } from 'primereact/button';\nimport { Checkbox } from \"primereact/checkbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Edit() {\n  _s();\n  const [form, setForm] = useState({\n    title: \"\",\n    author: \"\",\n    date: \"\",\n    genre: \"\",\n    books: []\n  });\n  const categories = [{\n    genre: 'Action & Adventure',\n    key: 'AA'\n  }, {\n    genre: 'Adult',\n    key: 'AD'\n  }, {\n    genre: 'Biography',\n    key: 'BI'\n  }, {\n    genre: 'Comedy',\n    key: 'CO'\n  }, {\n    genre: 'Drama',\n    key: 'DR'\n  }, {\n    genre: 'Dystopian',\n    key: 'DY'\n  }, {\n    genre: 'Fantasy',\n    key: 'FA'\n  }, {\n    genre: 'Horror',\n    key: 'HO'\n  }, {\n    genre: 'Mystery',\n    key: 'MY'\n  }, {\n    genre: 'Non-fiction',\n    key: 'NF'\n  }, {\n    genre: 'Psychological',\n    key: 'PS'\n  }, {\n    genre: 'Romance',\n    key: 'RO'\n  }, {\n    genre: 'Satire',\n    key: 'SA'\n  }, {\n    genre: 'Self Help',\n    key: 'SH'\n  }, {\n    genre: 'Thriller',\n    key: 'TH'\n  }, {\n    genre: 'True Crime',\n    key: 'TC'\n  }, {\n    genre: 'Young Adult',\n    key: 'YA'\n  }];\n  const [selectedCategories, setSelectedCategories] = useState([categories[0]]);\n  const onCategoryChange = e => {\n    let _selectedCategories = [...selectedCategories];\n    if (e.checked) _selectedCategories.push(e.value);else _selectedCategories = _selectedCategories.filter(category => category.key !== e.value.key);\n    setSelectedCategories(_selectedCategories);\n    updateForm({\n      genre: _selectedCategories\n    });\n  };\n  const params = useParams();\n  const navigate = useNavigate();\n  const [date, setDate] = useState('');\n  const dateInputRef = useRef(null);\n  useEffect(() => {\n    async function fetchData() {\n      const id = params.id.toString();\n      const response = await fetch(`http://localhost:3000/book/${params.id.toString()}`);\n      if (!response.ok) {\n        const message = `An error has occurred: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n      const book = await response.json();\n      if (!book) {\n        window.alert(`book with id ${id} not found`);\n        navigate(\"/\");\n        return;\n      }\n      setForm(book);\n    }\n    fetchData();\n    return;\n  }, [params.id, navigate]);\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    // only if genres get edited, then just get genres within the array of objects\n    if (value.genre !== undefined) {\n      let getGenre = value.genre.map(a => a.genre);\n      getGenre.sort();\n      value.genre = getGenre.join(', ');\n      return setForm(prev => {\n        return {\n          ...prev,\n          ...value\n        };\n      });\n    } else {\n      return setForm(prev => {\n        return {\n          ...prev,\n          ...value\n        };\n      });\n    }\n  }\n  async function onSubmit(e) {\n    e.preventDefault();\n    var date = form.date;\n    if (date === undefined || date === null || date === \"Plan To Read\" || date === \"\") {\n      date = 'Plan To Read';\n    } else {\n      date = JSON.stringify(date).slice(1, 11);\n    }\n    const editedBook = {\n      title: form.title,\n      author: form.author,\n      date: date,\n      genre: form.genre\n    };\n\n    // This will send a post request to update the data in the database.\n    await fetch(`http://localhost:3000/update/${params.id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedBook),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    navigate(\"/\");\n  }\n\n  // This following section will display the form that takes input from the user to update the data.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"pi pi-fw pi-arrow-circle-left\",\n      onClick: () => navigate(\"/\"),\n      style: {\n        'fontSize': '2em',\n        'cursor': 'pointer',\n        'marginLeft': 50\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: 'auto',\n        width: '50%',\n        padding: 50\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Edit Book\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"title\",\n            children: \"Title: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            id: \"title\",\n            value: form.title,\n            onChange: e => updateForm({\n              title: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"author\",\n            children: \"Author: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            id: \"author\",\n            value: form.author,\n            onChange: e => updateForm({\n              author: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"date\",\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Calendar, {\n              type: \"date\"\n              // className=\"form-control\"\n              ,\n              id: \"calendar\",\n              value: form.date,\n              onChange: e => updateForm({\n                date: e.target.value\n              }),\n              ref: dateInputRef,\n              dateFormat: \"mm-dd-yy\",\n              showIcon: true,\n              showButtonBar: true,\n              touchUI: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"genre\",\n            children: \"Genres\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              'columnCount': 2\n            },\n            children: categories.map(category => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex align-items-center\",\n                  style: {\n                    'marginTop': 10\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                    inputId: category.key,\n                    name: \"category\",\n                    value: category,\n                    onChange: onCategoryChange,\n                    checked: selectedCategories.some(item => item.key === category.key)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 176,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    htmlFor: category.key,\n                    className: \"ml-2\",\n                    style: {\n                      'marginLeft': 10\n                    },\n                    children: category.genre\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 25\n                  }, this)]\n                }, category.key, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            label: \"Update Book\",\n            className: \" btn btn-primary p-button-raised p-button-info\",\n            type: \"submit\",\n            value: \"Update Book\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(Edit, \"6cLhKsi+X+GaPB9h/8xkmUGJ+VM=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Edit;\nvar _c;\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useParams","useNavigate","Calendar","Button","Checkbox","Edit","form","setForm","title","author","date","genre","books","categories","key","selectedCategories","setSelectedCategories","onCategoryChange","e","_selectedCategories","checked","push","value","filter","category","updateForm","params","navigate","setDate","dateInputRef","fetchData","id","toString","response","fetch","ok","message","statusText","window","alert","book","json","undefined","getGenre","map","a","sort","join","prev","onSubmit","preventDefault","JSON","stringify","slice","editedBook","method","body","headers","margin","width","padding","target","some","item"],"sources":["D:/Users/VS-Work/bookLibrary/client/src/components/edit.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router\";\r\nimport '../App.css';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport { Button } from 'primereact/button';\r\nimport { Checkbox } from \"primereact/checkbox\";\r\n \r\nexport default function Edit() {\r\n  const [form, setForm] = useState({\r\n    title: \"\",\r\n    author: \"\",\r\n    date: \"\",\r\n    genre: \"\",\r\n    books: [],\r\n  });\r\n\r\n  const categories = [\r\n    { genre: 'Action & Adventure', key: 'AA' },\r\n    { genre: 'Adult', key: 'AD' },\r\n    { genre: 'Biography', key: 'BI' },\r\n    { genre: 'Comedy', key: 'CO' },\r\n    { genre: 'Drama', key: 'DR' },\r\n    { genre: 'Dystopian', key: 'DY' },\r\n    { genre: 'Fantasy', key: 'FA' },\r\n    { genre: 'Horror', key: 'HO' },\r\n    { genre: 'Mystery', key: 'MY' },\r\n    { genre: 'Non-fiction', key: 'NF' },\r\n    { genre: 'Psychological', key: 'PS' },\r\n    { genre: 'Romance', key: 'RO' },\r\n    { genre: 'Satire', key: 'SA' },\r\n    { genre: 'Self Help', key: 'SH' },\r\n    { genre: 'Thriller', key: 'TH' },\r\n    { genre: 'True Crime', key: 'TC' },\r\n    { genre: 'Young Adult', key: 'YA' },\r\n  ];\r\n\r\n  const [selectedCategories, setSelectedCategories] = useState([categories[0]]);\r\n\r\n  const onCategoryChange = (e) => {\r\n      let _selectedCategories = [...selectedCategories];\r\n      if (e.checked)\r\n          _selectedCategories.push(e.value);\r\n      else \r\n          _selectedCategories = _selectedCategories.filter(category => category.key !== e.value.key);\r\n\r\n      setSelectedCategories(_selectedCategories);\r\n      updateForm({ genre: _selectedCategories });\r\n  };\r\n\r\n  const params = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const [date, setDate] = useState('');\r\n  const dateInputRef = useRef(null);\r\n \r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const id = params.id.toString();\r\n      const response = await fetch(`http://localhost:3000/book/${params.id.toString()}`);\r\n  \r\n      if (!response.ok) {\r\n        const message = `An error has occurred: ${response.statusText}`;\r\n        window.alert(message);\r\n        return;\r\n      }\r\n  \r\n      const book = await response.json();\r\n      if (!book) {\r\n        window.alert(`book with id ${id} not found`);\r\n        navigate(\"/\");\r\n        return;\r\n      }\r\n    setForm(book);}\r\n    fetchData();\r\n  \r\n    return;\r\n  }, [params.id, navigate]);\r\n \r\n // These methods will update the state properties.\r\n  function updateForm(value) {\r\n    // only if genres get edited, then just get genres within the array of objects\r\n    if (value.genre !== undefined) {\r\n      let getGenre = value.genre.map(a => a.genre);\r\n      getGenre.sort();\r\n      value.genre = getGenre.join(', ');\r\n      return setForm((prev) => {\r\n        return { ...prev, ...value };\r\n      });\r\n\r\n    } else {\r\n      return setForm((prev) => {\r\n        return { ...prev, ...value };\r\n      });\r\n    }\r\n  }\r\n \r\n  async function onSubmit(e) {\r\n    e.preventDefault(); \r\n\r\n    var date = form.date;\r\n    if (date === undefined || date === null || date === \"Plan To Read\" || date === \"\") {\r\n      date = 'Plan To Read';\r\n    } else {\r\n      date = JSON.stringify(date).slice(1, 11);\r\n    }\r\n \r\n  const editedBook = {\r\n    title: form.title,\r\n    author: form.author,\r\n    date: date,\r\n    genre: form.genre,\r\n  };\r\n\r\n  // This will send a post request to update the data in the database.\r\n  await fetch(`http://localhost:3000/update/${params.id}`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(editedBook),\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n  });\r\n    navigate(\"/\");\r\n  }\r\n \r\n // This following section will display the form that takes input from the user to update the data.\r\n  return (\r\n    <div>\r\n      <i className=\"pi pi-fw pi-arrow-circle-left\" onClick={() => navigate(\"/\")} style={{'fontSize':'2em','cursor':'pointer','marginLeft':50}}></i>\r\n      <div style={{ margin: 'auto', width: '50%', padding: 50 }}>\r\n        <h3>Edit Book</h3>\r\n        <form onSubmit={onSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"title\">Title: </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"title\"\r\n              value={form.title}\r\n              onChange={(e) => updateForm({ title: e.target.value })}\r\n            />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"author\">Author: </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"author\"\r\n            value={form.author}\r\n            onChange={(e) => updateForm({ author: e.target.value })}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"date\">Date</label>\r\n          <div>\r\n            <Calendar \r\n              type=\"date\"\r\n              // className=\"form-control\"\r\n              id=\"calendar\"\r\n              value={form.date}\r\n              onChange={(e) => updateForm({ date: e.target.value })}\r\n              ref={dateInputRef}\r\n              dateFormat=\"mm-dd-yy\"\r\n              showIcon \r\n              showButtonBar \r\n              touchUI \r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"genre\">Genres</label>\r\n            <div style ={{ 'columnCount' : 2}}>         \r\n              {categories.map((category) => {\r\n                return (\r\n                  <div>\r\n                    <div key={category.key} className=\"flex align-items-center\" style={{'marginTop': 10}}>\r\n                        <Checkbox inputId={category.key} name=\"category\" value={category} onChange={onCategoryChange} checked={selectedCategories.some((item) => item.key === category.key)} />\r\n                        <label htmlFor={category.key} className=\"ml-2\" style={{ 'marginLeft' : 10}}>\r\n                            {category.genre}\r\n                        </label>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <Button \r\n              label=\"Update Book\" \r\n              className=\" btn btn-primary p-button-raised p-button-info\"\r\n              type=\"submit\"\r\n              value=\"Update Book\"\r\n            />\r\n            <br />\r\n          </div>\r\n       {/* <div className=\"\">\r\n          <div className=\"form-check form-check-inline\">\r\n           <input\r\n             className=\"form-check-input\"\r\n             type=\"radio\"\r\n             name=\"genreOptions\"\r\n             id=\"genreAction&Adventure\"\r\n             value=\"Action & Adventure\"\r\n             checked={form.genre === \"Action & Adventure\"}\r\n             onChange={(e) => updateForm({ genre: e.target.value })}\r\n           />\r\n           <label htmlFor=\"genreAction&Adventure\" className=\"form-check-label\">Action & Adventure</label>\r\n        </div>\r\n        <div className=\"form-check form-check-inline\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"radio\"\r\n            name=\"genreOptions\"\r\n            id=\"genreAdult\"\r\n            value=\"Adult\"\r\n            checked={form.genre === \"Adult\"}\r\n            onChange={(e) => updateForm({ genre: e.target.value })}\r\n          />\r\n          <label htmlFor=\"genreAdult\" className=\"form-check-label\">Adult</label>\r\n       </div>\r\n       <div className=\"form-check form-check-inline\">\r\n           <input\r\n             className=\"form-check-input\"\r\n             type=\"radio\"\r\n             name=\"genreOptions\"\r\n             id=\"genreBibliography\"\r\n             value=\"Bibliography\"\r\n             checked={form.genre === \"Bibliography\"}\r\n             onChange={(e) => updateForm({ genre: e.target.value })}\r\n           />\r\n           <label htmlFor=\"genreBibliography\" className=\"form-check-label\">Bibliography</label>\r\n         </div>\r\n         <div className=\"form-check form-check-inline\">\r\n           <input\r\n             className=\"form-check-input\"\r\n             type=\"radio\"\r\n             name=\"genreOptions\"\r\n             id=\"genreComedy\"\r\n             value=\"Comedy\"\r\n             checked={form.genre === \"Comedy\"}\r\n             onChange={(e) => updateForm({ genre: e.target.value })}\r\n           />\r\n           <label htmlFor=\"genreComedy\" className=\"form-check-label\">Comedy</label>\r\n         </div>\r\n         <div className=\"form-check form-check-inline\">\r\n           <input\r\n             className=\"form-check-input\"\r\n             type=\"radio\"\r\n             name=\"genreOptions\"\r\n             id=\"genreDrama\"\r\n             value=\"Drama\"\r\n             checked={form.genre === \"Drama\"}\r\n             onChange={(e) => updateForm({ genre: e.target.value })}\r\n           />\r\n           <label htmlFor=\"genreDrama\" className=\"form-check-label\">Drama</label>\r\n         </div>\r\n         <div className=\"form-check form-check-inline\">\r\n           <input\r\n             className=\"form-check-input\"\r\n             type=\"radio\"\r\n             name=\"genreOptions\"\r\n             id=\"genreDystopian\"\r\n             value=\"Dystopian\"\r\n             checked={form.genre === \"Dystopian\"}\r\n             onChange={(e) => updateForm({ genre: e.target.value })}\r\n           />\r\n           <label htmlFor=\"genreDystopian\" className=\"form-check-label\">Dystopian</label>\r\n         </div>\r\n         <div className=\"form-check form-check-inline\">\r\n           <input\r\n             className=\"form-check-input\"\r\n             type=\"radio\"\r\n             name=\"genreOptions\"\r\n             id=\"genreFantasy\"\r\n             value=\"Fantasy\"\r\n             checked={form.genre === \"Fantasy\"}\r\n             onChange={(e) => updateForm({ genre: e.target.value })}\r\n           />\r\n           <label htmlFor=\"genreFantasy\" className=\"form-check-label\">Fantasy</label>\r\n         </div>\r\n         <div className=\"form-check form-check-inline\">\r\n           <input\r\n             className=\"form-check-input\"\r\n             type=\"radio\"\r\n             name=\"genreOptions\"\r\n             id=\"genreMystery\"\r\n             value=\"Mystery\"\r\n             checked={form.genre === \"Mystery\"}\r\n             onChange={(e) => updateForm({ genre: e.target.value })}\r\n           />\r\n           <label htmlFor=\"genreMystery\" className=\"form-check-label\">Mystery</label>\r\n         </div>\r\n         <div className=\"form-check form-check-inline\">\r\n           <input\r\n             className=\"form-check-input\"\r\n             type=\"radio\"\r\n             name=\"genreOptions\"\r\n             id=\"genreRomance\"\r\n             value=\"Romance\"\r\n             checked={form.genre === \"Romance\"}\r\n             onChange={(e) => updateForm({ genre: e.target.value })}\r\n           />\r\n           <label htmlFor=\"genreRomance\" className=\"form-check-label\">Romance</label>\r\n         </div>\r\n         <div className=\"form-check form-check-inline\">\r\n           <input\r\n             className=\"form-check-input\"\r\n             type=\"radio\"\r\n             name=\"genreOptions\"\r\n             id=\"genreSatire\"\r\n             value=\"Satire\"\r\n             checked={form.genre === \"Satire\"}\r\n             onChange={(e) => updateForm({ genre: e.target.value })}\r\n           />\r\n           <label htmlFor=\"genreSatire\" className=\"form-check-label\">Satire</label>\r\n         </div>\r\n         <div className=\"form-check form-check-inline\">\r\n           <input\r\n             className=\"form-check-input\"\r\n             type=\"radio\"\r\n             name=\"genreOptions\"\r\n             id=\"genreSelfHelp\"\r\n             value=\"SelfHelp\"\r\n             checked={form.genre === \"SelfHelp\"}\r\n             onChange={(e) => updateForm({ genre: e.target.value })}\r\n           />\r\n           <label htmlFor=\"genreSelfHelp\" className=\"form-check-label\">Self Help</label>\r\n         </div>\r\n         <div className=\"form-check form-check-inline\">\r\n           <input\r\n             className=\"form-check-input\"\r\n             type=\"radio\"\r\n             name=\"genreOptions\"\r\n             id=\"genreThriller\"\r\n             value=\"Thriller\"\r\n             checked={form.genre === \"Thriller\"}\r\n             onChange={(e) => updateForm({ genre: e.target.value })}\r\n           />\r\n           <label htmlFor=\"genreThriller\" className=\"form-check-label\">Thriller</label>\r\n         </div>\r\n         <div className=\"form-check form-check-inline\">\r\n           <input\r\n             className=\"form-check-input\"\r\n             type=\"radio\"\r\n             name=\"genreOptions\"\r\n             id=\"genreYoungAdult\"\r\n             value=\"YoungAdult\"\r\n             checked={form.genre === \"YoungAdult\"}\r\n             onChange={(e) => updateForm({ genre: e.target.value })}\r\n           />\r\n           <label htmlFor=\"genreYoungAdult\" className=\"form-check-label\">Young Adult</label>\r\n         </div>\r\n       </div> */}\r\n     </form>\r\n   </div>\r\n  </div>\r\n );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,SAAS,EAAEC,WAAW,QAAQ,cAAc;AACrD,OAAO,YAAY;AACnB,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,QAAQ,QAAQ,qBAAqB;AAAC;AAE/C,eAAe,SAASC,IAAI,GAAG;EAAA;EAC7B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC;IAC/BU,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,EAAE;IACVC,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,MAAMC,UAAU,GAAG,CACjB;IAAEF,KAAK,EAAE,oBAAoB;IAAEG,GAAG,EAAE;EAAK,CAAC,EAC1C;IAAEH,KAAK,EAAE,OAAO;IAAEG,GAAG,EAAE;EAAK,CAAC,EAC7B;IAAEH,KAAK,EAAE,WAAW;IAAEG,GAAG,EAAE;EAAK,CAAC,EACjC;IAAEH,KAAK,EAAE,QAAQ;IAAEG,GAAG,EAAE;EAAK,CAAC,EAC9B;IAAEH,KAAK,EAAE,OAAO;IAAEG,GAAG,EAAE;EAAK,CAAC,EAC7B;IAAEH,KAAK,EAAE,WAAW;IAAEG,GAAG,EAAE;EAAK,CAAC,EACjC;IAAEH,KAAK,EAAE,SAAS;IAAEG,GAAG,EAAE;EAAK,CAAC,EAC/B;IAAEH,KAAK,EAAE,QAAQ;IAAEG,GAAG,EAAE;EAAK,CAAC,EAC9B;IAAEH,KAAK,EAAE,SAAS;IAAEG,GAAG,EAAE;EAAK,CAAC,EAC/B;IAAEH,KAAK,EAAE,aAAa;IAAEG,GAAG,EAAE;EAAK,CAAC,EACnC;IAAEH,KAAK,EAAE,eAAe;IAAEG,GAAG,EAAE;EAAK,CAAC,EACrC;IAAEH,KAAK,EAAE,SAAS;IAAEG,GAAG,EAAE;EAAK,CAAC,EAC/B;IAAEH,KAAK,EAAE,QAAQ;IAAEG,GAAG,EAAE;EAAK,CAAC,EAC9B;IAAEH,KAAK,EAAE,WAAW;IAAEG,GAAG,EAAE;EAAK,CAAC,EACjC;IAAEH,KAAK,EAAE,UAAU;IAAEG,GAAG,EAAE;EAAK,CAAC,EAChC;IAAEH,KAAK,EAAE,YAAY;IAAEG,GAAG,EAAE;EAAK,CAAC,EAClC;IAAEH,KAAK,EAAE,aAAa;IAAEG,GAAG,EAAE;EAAK,CAAC,CACpC;EAED,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGlB,QAAQ,CAAC,CAACe,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;EAE7E,MAAMI,gBAAgB,GAAIC,CAAC,IAAK;IAC5B,IAAIC,mBAAmB,GAAG,CAAC,GAAGJ,kBAAkB,CAAC;IACjD,IAAIG,CAAC,CAACE,OAAO,EACTD,mBAAmB,CAACE,IAAI,CAACH,CAAC,CAACI,KAAK,CAAC,CAAC,KAElCH,mBAAmB,GAAGA,mBAAmB,CAACI,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACV,GAAG,KAAKI,CAAC,CAACI,KAAK,CAACR,GAAG,CAAC;IAE9FE,qBAAqB,CAACG,mBAAmB,CAAC;IAC1CM,UAAU,CAAC;MAAEd,KAAK,EAAEQ;IAAoB,CAAC,CAAC;EAC9C,CAAC;EAED,MAAMO,MAAM,GAAG1B,SAAS,EAAE;EAC1B,MAAM2B,QAAQ,GAAG1B,WAAW,EAAE;EAE9B,MAAM,CAACS,IAAI,EAAEkB,OAAO,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM+B,YAAY,GAAGhC,MAAM,CAAC,IAAI,CAAC;EAEjCE,SAAS,CAAC,MAAM;IACd,eAAe+B,SAAS,GAAG;MACzB,MAAMC,EAAE,GAAGL,MAAM,CAACK,EAAE,CAACC,QAAQ,EAAE;MAC/B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,8BAA6BR,MAAM,CAACK,EAAE,CAACC,QAAQ,EAAG,EAAC,CAAC;MAElF,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,OAAO,GAAI,0BAAyBH,QAAQ,CAACI,UAAW,EAAC;QAC/DC,MAAM,CAACC,KAAK,CAACH,OAAO,CAAC;QACrB;MACF;MAEA,MAAMI,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,EAAE;MAClC,IAAI,CAACD,IAAI,EAAE;QACTF,MAAM,CAACC,KAAK,CAAE,gBAAeR,EAAG,YAAW,CAAC;QAC5CJ,QAAQ,CAAC,GAAG,CAAC;QACb;MACF;MACFpB,OAAO,CAACiC,IAAI,CAAC;IAAC;IACdV,SAAS,EAAE;IAEX;EACF,CAAC,EAAE,CAACJ,MAAM,CAACK,EAAE,EAAEJ,QAAQ,CAAC,CAAC;;EAE1B;EACC,SAASF,UAAU,CAACH,KAAK,EAAE;IACzB;IACA,IAAIA,KAAK,CAACX,KAAK,KAAK+B,SAAS,EAAE;MAC7B,IAAIC,QAAQ,GAAGrB,KAAK,CAACX,KAAK,CAACiC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAClC,KAAK,CAAC;MAC5CgC,QAAQ,CAACG,IAAI,EAAE;MACfxB,KAAK,CAACX,KAAK,GAAGgC,QAAQ,CAACI,IAAI,CAAC,IAAI,CAAC;MACjC,OAAOxC,OAAO,CAAEyC,IAAI,IAAK;QACvB,OAAO;UAAE,GAAGA,IAAI;UAAE,GAAG1B;QAAM,CAAC;MAC9B,CAAC,CAAC;IAEJ,CAAC,MAAM;MACL,OAAOf,OAAO,CAAEyC,IAAI,IAAK;QACvB,OAAO;UAAE,GAAGA,IAAI;UAAE,GAAG1B;QAAM,CAAC;MAC9B,CAAC,CAAC;IACJ;EACF;EAEA,eAAe2B,QAAQ,CAAC/B,CAAC,EAAE;IACzBA,CAAC,CAACgC,cAAc,EAAE;IAElB,IAAIxC,IAAI,GAAGJ,IAAI,CAACI,IAAI;IACpB,IAAIA,IAAI,KAAKgC,SAAS,IAAIhC,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,cAAc,IAAIA,IAAI,KAAK,EAAE,EAAE;MACjFA,IAAI,GAAG,cAAc;IACvB,CAAC,MAAM;MACLA,IAAI,GAAGyC,IAAI,CAACC,SAAS,CAAC1C,IAAI,CAAC,CAAC2C,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAC1C;IAEF,MAAMC,UAAU,GAAG;MACjB9C,KAAK,EAAEF,IAAI,CAACE,KAAK;MACjBC,MAAM,EAAEH,IAAI,CAACG,MAAM;MACnBC,IAAI,EAAEA,IAAI;MACVC,KAAK,EAAEL,IAAI,CAACK;IACd,CAAC;;IAED;IACA,MAAMuB,KAAK,CAAE,gCAA+BR,MAAM,CAACK,EAAG,EAAC,EAAE;MACvDwB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACE,UAAU,CAAC;MAChCG,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACA9B,QAAQ,CAAC,GAAG,CAAC;EACf;;EAED;EACC,oBACE;IAAA,wBACE;MAAG,SAAS,EAAC,+BAA+B;MAAC,OAAO,EAAE,MAAMA,QAAQ,CAAC,GAAG,CAAE;MAAC,KAAK,EAAE;QAAC,UAAU,EAAC,KAAK;QAAC,QAAQ,EAAC,SAAS;QAAC,YAAY,EAAC;MAAE;IAAE;MAAA;MAAA;MAAA;IAAA,QAAK,eAC7I;MAAK,KAAK,EAAE;QAAE+B,MAAM,EAAE,MAAM;QAAEC,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAG,CAAE;MAAA,wBACxD;QAAA,UAAI;MAAS;QAAA;QAAA;QAAA;MAAA,QAAK,eAClB;QAAM,QAAQ,EAAEX,QAAS;QAAA,wBACvB;UAAK,SAAS,EAAC,YAAY;UAAA,wBACzB;YAAO,OAAO,EAAC,OAAO;YAAA,UAAC;UAAO;YAAA;YAAA;YAAA;UAAA,QAAQ,eACtC;YACE,IAAI,EAAC,MAAM;YACX,SAAS,EAAC,cAAc;YACxB,EAAE,EAAC,OAAO;YACV,KAAK,EAAE3C,IAAI,CAACE,KAAM;YAClB,QAAQ,EAAGU,CAAC,IAAKO,UAAU,CAAC;cAAEjB,KAAK,EAAEU,CAAC,CAAC2C,MAAM,CAACvC;YAAM,CAAC;UAAE;YAAA;YAAA;YAAA;UAAA,QACvD;QAAA;UAAA;UAAA;UAAA;QAAA,QACA,eACN;UAAK,SAAS,EAAC,YAAY;UAAA,wBACzB;YAAO,OAAO,EAAC,QAAQ;YAAA,UAAC;UAAQ;YAAA;YAAA;YAAA;UAAA,QAAQ,eACxC;YACE,IAAI,EAAC,MAAM;YACX,SAAS,EAAC,cAAc;YACxB,EAAE,EAAC,QAAQ;YACX,KAAK,EAAEhB,IAAI,CAACG,MAAO;YACnB,QAAQ,EAAGS,CAAC,IAAKO,UAAU,CAAC;cAAEhB,MAAM,EAAES,CAAC,CAAC2C,MAAM,CAACvC;YAAM,CAAC;UAAE;YAAA;YAAA;YAAA;UAAA,QACxD;QAAA;UAAA;UAAA;UAAA;QAAA,QACE,eACN;UAAK,SAAS,EAAC,YAAY;UAAA,wBACzB;YAAO,OAAO,EAAC,MAAM;YAAA,UAAC;UAAI;YAAA;YAAA;YAAA;UAAA,QAAQ,eAClC;YAAA,uBACE,QAAC,QAAQ;cACP,IAAI,EAAC;cACL;cAAA;cACA,EAAE,EAAC,UAAU;cACb,KAAK,EAAEhB,IAAI,CAACI,IAAK;cACjB,QAAQ,EAAGQ,CAAC,IAAKO,UAAU,CAAC;gBAAEf,IAAI,EAAEQ,CAAC,CAAC2C,MAAM,CAACvC;cAAM,CAAC,CAAE;cACtD,GAAG,EAAEO,YAAa;cAClB,UAAU,EAAC,UAAU;cACrB,QAAQ;cACR,aAAa;cACb,OAAO;YAAA;cAAA;cAAA;cAAA;YAAA;UACL;YAAA;YAAA;YAAA;UAAA,QACE;QAAA;UAAA;UAAA;UAAA;QAAA,QACF,eACN;UAAK,SAAS,EAAC,YAAY;UAAA,wBACzB;YAAO,OAAO,EAAC,OAAO;YAAA,UAAC;UAAM;YAAA;YAAA;YAAA;UAAA,QAAQ,eACrC;YAAK,KAAK,EAAG;cAAE,aAAa,EAAG;YAAC,CAAE;YAAA,UAC/BhB,UAAU,CAAC+B,GAAG,CAAEpB,QAAQ,IAAK;cAC5B,oBACE;gBAAA,uBACE;kBAAwB,SAAS,EAAC,yBAAyB;kBAAC,KAAK,EAAE;oBAAC,WAAW,EAAE;kBAAE,CAAE;kBAAA,wBACjF,QAAC,QAAQ;oBAAC,OAAO,EAAEA,QAAQ,CAACV,GAAI;oBAAC,IAAI,EAAC,UAAU;oBAAC,KAAK,EAAEU,QAAS;oBAAC,QAAQ,EAAEP,gBAAiB;oBAAC,OAAO,EAAEF,kBAAkB,CAAC+C,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACjD,GAAG,KAAKU,QAAQ,CAACV,GAAG;kBAAE;oBAAA;oBAAA;oBAAA;kBAAA,QAAG,eACvK;oBAAO,OAAO,EAAEU,QAAQ,CAACV,GAAI;oBAAC,SAAS,EAAC,MAAM;oBAAC,KAAK,EAAE;sBAAE,YAAY,EAAG;oBAAE,CAAE;oBAAA,UACtEU,QAAQ,CAACb;kBAAK;oBAAA;oBAAA;oBAAA;kBAAA,QACX;gBAAA,GAJFa,QAAQ,CAACV,GAAG;kBAAA;kBAAA;kBAAA;gBAAA;cAKhB;gBAAA;gBAAA;gBAAA;cAAA,QACF;YAEV,CAAC;UAAC;YAAA;YAAA;YAAA;UAAA,QACE;QAAA;UAAA;UAAA;UAAA;QAAA,QACF,eACN;UAAK,SAAS,EAAC,YAAY;UAAA,wBACzB,QAAC,MAAM;YACL,KAAK,EAAC,aAAa;YACnB,SAAS,EAAC,gDAAgD;YAC1D,IAAI,EAAC,QAAQ;YACb,KAAK,EAAC;UAAa;YAAA;YAAA;YAAA;UAAA,QACnB,eACF;YAAA;YAAA;YAAA;UAAA,QAAM;QAAA;UAAA;UAAA;UAAA;QAAA,QACF;MAAA;QAAA;QAAA;QAAA;MAAA,QA+JJ;IAAA;MAAA;MAAA;MAAA;IAAA,QACH;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAER;AAAC,GA7VuBT,IAAI;EAAA,QA0CXL,SAAS,EACPC,WAAW;AAAA;AAAA,KA3CNI,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}