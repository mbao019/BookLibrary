{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\VS-Work\\\\bookLibrary\\\\client\\\\src\\\\components\\\\edit.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router\";\nimport '../App.css';\nimport { Calendar } from 'primereact/calendar';\nimport { Button } from 'primereact/button';\nimport { Checkbox } from \"primereact/checkbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Edit() {\n  _s();\n  const [form, setForm] = useState({\n    title: \"\",\n    author: \"\",\n    date: \"\",\n    genre: \"\",\n    books: []\n  });\n  const params = useParams();\n  const navigate = useNavigate();\n  const [date, setDate] = useState('');\n  const dateInputRef = useRef(null);\n\n  // const genreCategories = [\n  //   { genre: 'Action & Adventure', key: 'AA'},\n  //   { genre: 'Adult', key: 'A'}, \n  //   { genre: 'Bibliography', key: 'B'}, \n  //   { genre: 'Comedy', key: 'C'}, \n  //   { genre: 'Drama', key: 'D'}, \n  //   { genre: 'Dystopian', key: 'Dy'}, \n  //   { genre: 'Fantasy', key: 'F'}, \n  //   { genre: 'Mystery', key: 'M'}, \n  //   { genre: 'Romance', key: 'R'},\n  //   { genre: 'Satire', key: 'S'},  \n  //   { genre: 'Self Help', key: 'SH'},\n  //   { genre: 'Thriller', key: 'T'},\n  //   { genre: 'Young Adult', key: 'YA'}\n  // ];\n\n  useEffect(() => {\n    async function fetchData() {\n      const id = params.id.toString();\n      const response = await fetch(`http://localhost:3000/book/${params.id.toString()}`);\n      if (!response.ok) {\n        const message = `An error has occurred: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n      const book = await response.json();\n      if (!book) {\n        window.alert(`book with id ${id} not found`);\n        navigate(\"/\");\n        return;\n      }\n      setForm(book);\n    }\n    fetchData();\n    return;\n  }, [params.id, navigate]);\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    return setForm(prev => {\n      return {\n        ...prev,\n        ...value\n      };\n    });\n  }\n  async function onSubmit(e) {\n    e.preventDefault();\n    var date = form.date;\n    if (date == null || date !== \"Plan To Read\") {\n      date = 'Plan To Read';\n    } else {\n      date = JSON.stringify(date).slice(1, 11);\n    }\n    const editedBook = {\n      title: form.title,\n      author: form.author,\n      date: date,\n      genre: form.genre\n    };\n\n    // This will send a post request to update the data in the database.\n    await fetch(`http://localhost:3000/update/${params.id}`, {\n      method: \"POST\",\n      body: JSON.stringify(editedBook),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    navigate(\"/\");\n  }\n\n  // This following section will display the form that takes input from the user to update the data.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"pi pi-fw pi-arrow-circle-left\",\n      onClick: () => navigate(\"/\"),\n      style: {\n        'fontSize': '2em',\n        'cursor': 'pointer',\n        'marginLeft': 50\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: 50,\n        marginLeft: 200,\n        marginRight: 200\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Edit Book\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 1\n  }, this);\n}\n_s(Edit, \"lCZfqzjcRP+qy8Q78aZpPvocRLU=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Edit;\nvar _c;\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useParams","useNavigate","Calendar","Button","Checkbox","Edit","form","setForm","title","author","date","genre","books","params","navigate","setDate","dateInputRef","fetchData","id","toString","response","fetch","ok","message","statusText","window","alert","book","json","updateForm","value","prev","onSubmit","e","preventDefault","JSON","stringify","slice","editedBook","method","body","headers","margin","marginLeft","marginRight"],"sources":["D:/Users/VS-Work/bookLibrary/client/src/components/edit.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router\";\r\nimport '../App.css';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport { Button } from 'primereact/button';\r\nimport { Checkbox } from \"primereact/checkbox\";\r\n \r\nexport default function Edit() {\r\n  const [form, setForm] = useState({\r\n    title: \"\",\r\n    author: \"\",\r\n    date: \"\",\r\n    genre: \"\",\r\n    books: [],\r\n });\r\n\r\nconst params = useParams();\r\nconst navigate = useNavigate();\r\n\r\nconst [date, setDate] = useState('');\r\nconst dateInputRef = useRef(null);\r\n\r\n// const genreCategories = [\r\n//   { genre: 'Action & Adventure', key: 'AA'},\r\n//   { genre: 'Adult', key: 'A'}, \r\n//   { genre: 'Bibliography', key: 'B'}, \r\n//   { genre: 'Comedy', key: 'C'}, \r\n//   { genre: 'Drama', key: 'D'}, \r\n//   { genre: 'Dystopian', key: 'Dy'}, \r\n//   { genre: 'Fantasy', key: 'F'}, \r\n//   { genre: 'Mystery', key: 'M'}, \r\n//   { genre: 'Romance', key: 'R'},\r\n//   { genre: 'Satire', key: 'S'},  \r\n//   { genre: 'Self Help', key: 'SH'},\r\n//   { genre: 'Thriller', key: 'T'},\r\n//   { genre: 'Young Adult', key: 'YA'}\r\n// ];\r\n \r\nuseEffect(() => {\r\n  async function fetchData() {\r\n    const id = params.id.toString();\r\n    const response = await fetch(`http://localhost:3000/book/${params.id.toString()}`);\r\n \r\n    if (!response.ok) {\r\n      const message = `An error has occurred: ${response.statusText}`;\r\n      window.alert(message);\r\n      return;\r\n    }\r\n \r\n    const book = await response.json();\r\n    if (!book) {\r\n      window.alert(`book with id ${id} not found`);\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n  setForm(book);\r\n  }\r\n \r\n  fetchData();\r\n \r\n  return;\r\n}, [params.id, navigate]);\r\n \r\n // These methods will update the state properties.\r\nfunction updateForm(value) {\r\n  return setForm((prev) => {\r\n    return { ...prev, ...value };\r\n  });\r\n}\r\n \r\nasync function onSubmit(e) {\r\n  e.preventDefault(); \r\n\r\n  var date = form.date;\r\n    if (date == null || date !== \"Plan To Read\") {\r\n      date = 'Plan To Read';\r\n    } else {\r\n      date = JSON.stringify(date).slice(1, 11);\r\n    }\r\n\r\n   const editedBook = {\r\n     title: form.title,\r\n     author: form.author,\r\n     date: date,\r\n     genre: form.genre,\r\n   };\r\n\r\n   // This will send a post request to update the data in the database.\r\n  await fetch(`http://localhost:3000/update/${params.id}`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(editedBook),\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n  });\r\n  navigate(\"/\");\r\n}\r\n\r\n\r\n\r\n// This following section will display the form that takes input from the user to update the data.\r\nreturn (\r\n<div>\r\n  <i className=\"pi pi-fw pi-arrow-circle-left\" onClick={() => navigate(\"/\")} style={{'fontSize':'2em','cursor':'pointer','marginLeft':50}}></i>\r\n  <div style={{ margin: 50, marginLeft: 200, marginRight:200 }}>\r\n    <h3>Edit Book</h3>\r\n    {/* <form onSubmit={onSubmit}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"title\">Title: </label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          id=\"title\"\r\n          value={form.title}\r\n          onChange={(e) => updateForm({ title: e.target.value })}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"author\">Author: </label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          id=\"author\"\r\n          value={form.author}\r\n          onChange={(e) => updateForm({ author: e.target.value })}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"date\">Date</label>\r\n        <div>\r\n        <Calendar \r\n            type=\"date\"\r\n            // className=\"form-control\"\r\n            id=\"calendar\"\r\n            value={form.date}\r\n            onChange={(e) => updateForm({ date: e.target.value })}\r\n            ref={dateInputRef}\r\n            dateFormat=\"mm-dd-yy\"\r\n            showIcon \r\n            showButtonBar \r\n            touchUI \r\n            />\r\n        </div>\r\n      </div>\r\n      <div className=\"\">\r\n        <div className=\"form-check form-check-inline\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"radio\"\r\n            name=\"genreOptions\"\r\n            id=\"genreAction&Adventure\"\r\n            value=\"Action & Adventure\"\r\n            checked={form.genre === \"Action & Adventure\"}\r\n            onChange={(e) => updateForm({ genre: e.target.value })}\r\n          />\r\n          <label htmlFor=\"genreAction&Adventure\" className=\"form-check-label\">Action & Adventure</label>\r\n      </div>\r\n      <div className=\"form-check form-check-inline\">\r\n        <input\r\n          className=\"form-check-input\"\r\n          type=\"radio\"\r\n          name=\"genreOptions\"\r\n          id=\"genreAdult\"\r\n          value=\"Adult\"\r\n          checked={form.genre === \"Adult\"}\r\n          onChange={(e) => updateForm({ genre: e.target.value })}\r\n        />\r\n        <label htmlFor=\"genreAdult\" className=\"form-check-label\">Adult</label>\r\n      </div>\r\n      <div className=\"form-check form-check-inline\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"radio\"\r\n            name=\"genreOptions\"\r\n            id=\"genreBibliography\"\r\n            value=\"Bibliography\"\r\n            checked={form.genre === \"Bibliography\"}\r\n            onChange={(e) => updateForm({ genre: e.target.value })}\r\n          />\r\n          <label htmlFor=\"genreBibliography\" className=\"form-check-label\">Bibliography</label>\r\n        </div>\r\n        <div className=\"form-check form-check-inline\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"radio\"\r\n            name=\"genreOptions\"\r\n            id=\"genreComedy\"\r\n            value=\"Comedy\"\r\n            checked={form.genre === \"Comedy\"}\r\n            onChange={(e) => updateForm({ genre: e.target.value })}\r\n          />\r\n          <label htmlFor=\"genreComedy\" className=\"form-check-label\">Comedy</label>\r\n        </div>\r\n        <div className=\"form-check form-check-inline\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"radio\"\r\n            name=\"genreOptions\"\r\n            id=\"genreDrama\"\r\n            value=\"Drama\"\r\n            checked={form.genre === \"Drama\"}\r\n            onChange={(e) => updateForm({ genre: e.target.value })}\r\n          />\r\n          <label htmlFor=\"genreDrama\" className=\"form-check-label\">Drama</label>\r\n        </div>\r\n        <div className=\"form-check form-check-inline\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"radio\"\r\n            name=\"genreOptions\"\r\n            id=\"genreDystopian\"\r\n            value=\"Dystopian\"\r\n            checked={form.genre === \"Dystopian\"}\r\n            onChange={(e) => updateForm({ genre: e.target.value })}\r\n          />\r\n          <label htmlFor=\"genreDystopian\" className=\"form-check-label\">Dystopian</label>\r\n        </div>\r\n        <div className=\"form-check form-check-inline\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"radio\"\r\n            name=\"genreOptions\"\r\n            id=\"genreFantasy\"\r\n            value=\"Fantasy\"\r\n            checked={form.genre === \"Fantasy\"}\r\n            onChange={(e) => updateForm({ genre: e.target.value })}\r\n          />\r\n          <label htmlFor=\"genreFantasy\" className=\"form-check-label\">Fantasy</label>\r\n        </div>\r\n        <div className=\"form-check form-check-inline\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"radio\"\r\n            name=\"genreOptions\"\r\n            id=\"genreMystery\"\r\n            value=\"Mystery\"\r\n            checked={form.genre === \"Mystery\"}\r\n            onChange={(e) => updateForm({ genre: e.target.value })}\r\n          />\r\n          <label htmlFor=\"genreMystery\" className=\"form-check-label\">Mystery</label>\r\n        </div>\r\n        <div className=\"form-check form-check-inline\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"radio\"\r\n            name=\"genreOptions\"\r\n            id=\"genreRomance\"\r\n            value=\"Romance\"\r\n            checked={form.genre === \"Romance\"}\r\n            onChange={(e) => updateForm({ genre: e.target.value })}\r\n          />\r\n          <label htmlFor=\"genreRomance\" className=\"form-check-label\">Romance</label>\r\n        </div>\r\n        <div className=\"form-check form-check-inline\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"radio\"\r\n            name=\"genreOptions\"\r\n            id=\"genreSatire\"\r\n            value=\"Satire\"\r\n            checked={form.genre === \"Satire\"}\r\n            onChange={(e) => updateForm({ genre: e.target.value })}\r\n          />\r\n          <label htmlFor=\"genreSatire\" className=\"form-check-label\">Satire</label>\r\n        </div>\r\n        <div className=\"form-check form-check-inline\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"radio\"\r\n            name=\"genreOptions\"\r\n            id=\"genreSelfHelp\"\r\n            value=\"Self Help\"\r\n            checked={form.genre === \"Self Help\"}\r\n            onChange={(e) => updateForm({ genre: e.target.value })}\r\n          />\r\n          <label htmlFor=\"genreSelfHelp\" className=\"form-check-label\">Self Help</label>\r\n        </div>\r\n        <div className=\"form-check form-check-inline\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"radio\"\r\n            name=\"genreOptions\"\r\n            id=\"genreThriller\"\r\n            value=\"Thriller\"\r\n            checked={form.genre === \"Thriller\"}\r\n            onChange={(e) => updateForm({ genre: e.target.value })}\r\n          />\r\n          <label htmlFor=\"genreThriller\" className=\"form-check-label\">Thriller</label>\r\n        </div>\r\n        <div className=\"form-check form-check-inline\">\r\n          <input\r\n            className=\"form-check-input\"\r\n            type=\"radio\"\r\n            name=\"genreOptions\"\r\n            id=\"genreYoungAdult\"\r\n            value=\"YoungAdult\"\r\n            checked={form.genre === \"YoungAdult\"}\r\n            onChange={(e) => updateForm({ genre: e.target.value })}\r\n          />\r\n          <label htmlFor=\"genreYoungAdult\" className=\"form-check-label\">Young Adult</label>\r\n        </div>\r\n      </div>\r\n      <br />\r\n      \r\n      <div className=\"form-group\">\r\n        <Button \r\n          label=\"Update Book\" \r\n          className=\" btn btn-primary p-button-raised p-button-info\"\r\n          type=\"submit\"\r\n          value=\"Update Book\"\r\n        />\r\n      </div>\r\n    </form> */}\r\n  </div>\r\n</div>\r\n);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}